{"version":3,"sources":["components/TabelaElement.js","components/GameOver.js","components/CardElement.js","components/GameBoard.js","game/game.js","memoryGame.js","reportWebVitals.js","index.js"],"names":["Tabela","props","lista","ranking","length","sort","prev","next","tentativas","className","map","player","index","nome","ListItem","style","GameOver","seeRanking","tableRanking","gameOverScreen","show","id","onClick","handleRestart","handleCloseRanking","CardElement","onHandleClick","card","flipped","src","icon","alt","GameBoard","cards","game","lockMode","firstCard","secondCard","techs","setCard","this","filter","checkMatch","clearCards","unflipCards","checkGameOver","createCardsFromTechs","forEach","tech","push","createPairFromTech","flatMap","pair","shuffleCards","createIdWithTech","parseInt","Math","random","currentIndex","randomIndex","floor","flipCard","cardId","gameOverCallback","noMatchCallback","updateCounter","setTimeout","MemoryGame","useState","setCards","gameOver","setGameOver","count","setCount","setRanking","inicializarGame","setSeeRanking","useRef","useEffect","current","prompt","localStorage","getItem","JSON","parse","Counter","updateCards","playerModel","setItem","stringify","currentCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e1e8710.chunk.js","sourcesContent":["export default function Tabela(props) {\r\n    const lista = props.ranking;\r\n    if (lista.length !== 0) {\r\n        lista.sort((prev, next) => prev.tentativas < next.tentativas ? -1 : true)\r\n        return (\r\n            <>\r\n                <h6>Ranking</h6>\r\n                <ol className=\"ranking_table\">\r\n                    {lista.map((player, index) => {\r\n                        return ListItem(player, index)\r\n                    })}\r\n                </ol>\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <h6>Ranking</h6>\r\n                <ol style={{\"textAlign\":\"center\",\"fontSize\": \"3vh\"}}>\r\n                    <h6>Ainda não há participantes</h6>\r\n                </ol>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nfunction ListItem(player, index) {\r\n    return (\r\n        <li key={index}>\r\n            <div>\r\n               <p> {index = index + 1} - Nome: {player.nome}</p>\r\n            </div>\r\n            <div>\r\n                <p>Tentativas: {player.tentativas}</p>\r\n            </div>\r\n        </li>\r\n    )\r\n}","import Ranking from './TabelaElement'\r\nexport default function GameOver(props) {\r\n    if (props.seeRanking) {\r\n        return tableRanking(props)\r\n    }\r\n    return gameOverScreen(props)\r\n}\r\n\r\nconst gameOverScreen = (props) => {\r\n    if (props.show) {\r\n        return (<div id=\"gameOver\">\r\n            <div>\r\n                Parabéns, você completou o jogo!\r\n            </div>\r\n            <Ranking ranking={props.ranking} />\r\n            <button id=\"restart\" onClick={props.handleRestart} >Jogue novamente</button>\r\n        </div>)\r\n    }\r\n    return <></>;\r\n}\r\n\r\nconst tableRanking = (props) => {\r\n\r\n\r\n    return (\r\n        <div onClick={props.handleCloseRanking} id=\"gameOver\">\r\n            <Ranking ranking={props.ranking} />\r\n            <div>\r\n                <h6>Clique para fechar a tabela de Ranking. :D</h6>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","export default function CardElement(props){\r\n    return(\r\n        <div onClick={() => props.onHandleClick(props.card)} id={props.card.id} className={`card ${props.card.flipped?\"flip\":\"\"}`} >\r\n            <div className=\"card_front\">\r\n                <img className=\"icon\" src={'assets/images/' + props.card.icon + \".png\"} alt={props.card.icon} />\r\n            </div>\r\n            <div className=\"card_back\">\r\n                {\"</>\"}\r\n            </div>\r\n        </div>\r\n    )\r\n}","\r\nimport CardElement from './CardElement'\r\nexport default function GameBoard(props) {    \r\n    return (\r\n        <div id=\"gameBoard\">\r\n            {props.cards.map((card, index) => <CardElement onHandleClick={props.onHandleClick} key={index} card={card}></CardElement>)}\r\n        </div>\r\n    )\r\n}","let game = {\n\n    lockMode: false,\n    firstCard: null,\n    secondCard: null,\n\n    techs: ['bootstrap',\n        'css',\n        'electron',\n        'firebase',\n        'html',\n        'javascript',\n        'jquery',\n        'mongo',\n        'node',\n        'react'],\n\n    cards: null,\n\n    setCard: function (id) {\n\n        let card = this.cards.filter(card => card.id === id)[0];\n        if (card.flipped || this.lockMode) {\n            return false;\n        }\n\n        if (!this.firstCard) {\n            this.firstCard = card;\n            this.firstCard.flipped = true;\n            return true;\n        } else {\n            this.secondCard = card;\n            this.secondCard.flipped = true;\n            this.lockMode = true;\n            return true;\n        }\n\n    },\n\n    checkMatch: function () {\n        if (!this.firstCard || !this.secondCard) {\n            return false;\n        }\n        return this.firstCard.icon === this.secondCard.icon;\n    },\n\n    clearCards: function () {\n        this.firstCard = null;\n        this.secondCard = null;\n        this.lockMode = false;\n    },\n    unflipCards() {\n        this.firstCard.flipped = false;\n        this.secondCard.flipped = false;\n        this.clearCards();\n    },\n\n    checkGameOver() {\n\n        return this.cards.filter(card => !card.flipped).length === 0;\n    },\n\n\n\n\n\n    createCardsFromTechs: function () {\n\n        this.cards = [];\n\n        this.techs.forEach((tech) => {\n            this.cards.push(this.createPairFromTech(tech));\n        })\n        this.cards = this.cards.flatMap(pair => pair);\n        this.shuffleCards();\n        return this.cards;\n    },\n\n    createPairFromTech: function (tech) {\n\n        return [{\n            id: this.createIdWithTech(tech),\n            icon: tech,\n            flipped: false,\n        }, {\n            id: this.createIdWithTech(tech),\n            icon: tech,\n            flipped: false,\n        }]\n\n    },\n\n    createIdWithTech: function (tech) {\n        return tech + parseInt(Math.random() * 1000);\n    },\n\n    shuffleCards: function (cards) {\n        let currentIndex = this.cards.length;\n        let randomIndex = 0;\n\n        while (currentIndex !== 0) {\n\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            [this.cards[randomIndex], this.cards[currentIndex]] = [this.cards[currentIndex], this.cards[randomIndex]]\n        }\n\n    },\n\n    flipCard: (cardId, gameOverCallback, noMatchCallback,updateCounter) => {\n        if (game.setCard(cardId)) {\n            if (game.secondCard) {\n                if (game.checkMatch()) {\n                 \n                    game.clearCards();\n                   \n                    if (game.checkGameOver()) {\n                        //Game Over\n                        gameOverCallback()\n                    }\n                    updateCounter();\n                } else {\n                    setTimeout(() => {\n                        // No Match\n                        game.unflipCards();\n                        noMatchCallback()\n                    }, 1000);\n                    updateCounter();\n                };\n            }\n            \n        }\n    }\n\n\n\n}\n\nexport default game;","import GameOver from './components/GameOver';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport GameBoard from './components/GameBoard';\r\nimport game from './game/game';\r\n\r\nexport default function MemoryGame() {\r\n    const [cards, setCards] = useState([])\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [count, setCount] = useState(0);\r\n    const [ranking, setRanking] = useState([]);\r\n    const inicializarGame = () => setCards(game.createCardsFromTechs());\r\n    const [seeRanking, setSeeRanking] = useState(false);\r\n    let player = useRef(\"\");\r\n    useEffect(() => {\r\n\r\n        player.current = prompt(\"Insira o seu nome: \");\r\n        while (player.current === \"\" || player.current === null) {\r\n            player.current = prompt(\"Insira o seu nome: \");\r\n        }\r\n\r\n        (localStorage.getItem(\"lista\") !== null) ? setRanking(JSON.parse(localStorage.getItem(\"lista\"))) : setRanking([]);\r\n\r\n        if (player.current !== \"\" || player.current !== null) {\r\n\r\n            inicializarGame()\r\n        }\r\n    }, [])\r\n\r\n    function restart() {\r\n        setGameOver(false);\r\n        setCount(0)\r\n        inicializarGame()\r\n    }\r\n    function onHandleClick(card) {\r\n        const updateCards = () => setCards([...game.cards]);\r\n        const updateCounter = () => setCount((currentCount) => currentCount = currentCount + 1);\r\n        game.flipCard(card.id,\r\n            () => {\r\n                const playerModel = {\r\n                    nome: player.current,\r\n                    tentativas: count\r\n                }\r\n                setRanking([...ranking, playerModel])\r\n                localStorage.setItem(\"lista\", JSON.stringify([...ranking, playerModel]))\r\n                setGameOver(true);\r\n            },\r\n            () => {\r\n                updateCards()\r\n            }, updateCounter)\r\n\r\n        updateCards()\r\n    }\r\n\r\n    function handleCloseRanking(){\r\n        setSeeRanking(false);\r\n    }\r\n    return (\r\n        <div>\r\n            <Counter count={count} setSeeRanking={setSeeRanking} />\r\n\r\n            <GameBoard onHandleClick={onHandleClick} cards={cards}></GameBoard>\r\n            <GameOver show={gameOver} handleRestart={restart} handleCloseRanking={handleCloseRanking} ranking={ranking} seeRanking={seeRanking}></GameOver>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Counter(props) {\r\n    return (\r\n        <div className=\"counter_container\">\r\n            <button onClick={()=>props.setSeeRanking(true)} className=\"ranking_button\"><h4>Tabela de ranking</h4></button>\r\n            <div className=\"counter\">\r\n                <div className=\"counter_title\"><h3>Tentativas:</h3></div>\r\n\r\n                <div className=\"counter_number\">{props.count}</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MemoryGame from './memoryGame';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MemoryGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}